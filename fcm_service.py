"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

from firebase_admin import messaging
from firebase_config import is_firebase_available
from models import db, FCMToken, User
import logging

logger = logging.getLogger(__name__)


def send_container_notification(container_data, location_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    –¢–û–õ–¨–ö–û –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å FCM —Ç–æ–∫–µ–Ω—ã)
    –í–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    
    Args:
        container_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (id, number, status, fill_level)
        location_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∏ (id, name, company_id)
    """
    if not is_firebase_available():
        logger.debug('Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_id = location_data['company_id']
        users = User.query.filter_by(parent_company_id=company_id).all()
        
        if not users:
            logger.debug(f'–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}')
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º FCM —Ç–æ–∫–µ–Ω—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        fcm_tokens = []
        for user in users:
            for token_obj in user.fcm_tokens:
                fcm_tokens.append(token_obj.token)
        
        if not fcm_tokens:
            logger.debug(f'–ù–µ—Ç FCM —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}')
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        status_text = {
            'full': '–∑–∞–ø–æ–ª–Ω–µ–Ω',
            'partial': '—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω',
            'empty': '–ø—É—Å—Ç–æ–π'
        }.get(container_data.get('status', 'unknown'), '–æ–±–Ω–æ–≤–ª–µ–Ω')
        
        title = '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ' + status_text + '!'
        body = f'{location_data["name"]}: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Ññ{container_data["number"]} {status_text}'
        
        # –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        message = messaging.MulticastMessage(
            notification=messaging.Notification(
                title=title,
                body=body,
            ),
            data={
                'location_id': str(location_data['id']),
                'location_name': location_data['name'],
                'container_id': str(container_data['id']),
                'container_number': str(container_data['number']),
                'status': container_data.get('status', 'unknown'),
                'fill_level': str(container_data.get('fill_level', 0)),
                'payload': 'container_updated',
            },
            tokens=fcm_tokens,
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        logger.info(f'üì± FCM: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(fcm_tokens)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
        logger.info(f'üì± FCM: –¢–æ–∫–µ–Ω—ã: {fcm_tokens[:2]}...')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ç–æ–∫–µ–Ω–∞
        response = messaging.send_multicast(message)
        logger.info(f'üì± FCM: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.success_count}/{len(fcm_tokens)}')
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        if response.failure_count > 0:
            _remove_invalid_tokens(response, fcm_tokens)
        
        return response.success_count
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
        return 0


def send_location_notification(location_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ
    –¢–û–õ–¨–ö–û –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        location_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∏ (id, name, status, company_id)
    """
    if not is_firebase_available():
        return
    
    try:
        company_id = location_data['company_id']
        users = User.query.filter_by(parent_company_id=company_id).all()
        
        fcm_tokens = []
        for user in users:
            for token_obj in user.fcm_tokens:
                fcm_tokens.append(token_obj.token)
        
        if not fcm_tokens:
            return
        
        status_text = {
            'full': '–∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
            'partial': '—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
            'empty': '–ø—É—Å—Ç–∞—è'
        }.get(location_data.get('status', 'unknown'), '–æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        
        title = f'–ü–ª–æ—â–∞–¥–∫–∞ {status_text}!'
        body = f'{location_data["name"]}: {status_text}'
        
        message = messaging.MulticastMessage(
            notification=messaging.Notification(
                title=title,
                body=body,
            ),
            data={
                'location_id': str(location_data['id']),
                'location_name': location_data['name'],
                'status': location_data.get('status', 'unknown'),
                'payload': 'location_updated',
            },
            tokens=fcm_tokens,
        )
        
        response = messaging.send_multicast(message)
        logger.info(f'üì± FCM: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–æ—â–∞–¥–∫–µ: {response.success_count}/{len(fcm_tokens)}')
        
        if response.failure_count > 0:
            _remove_invalid_tokens(response, fcm_tokens)
        
        return response.success_count
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—â–∞–¥–∫–µ: {e}')
        return 0


def send_to_company_topic(company_id, notification_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
    –í—Å–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–æ–ø–∏–∫, –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    Args:
        company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏
        notification_data: dict —Å title, body, –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ data
    """
    if not is_firebase_available():
        return
    
    try:
        topic = f'company_{company_id}'
        
        message = messaging.Message(
            notification=messaging.Notification(
                title=notification_data['title'],
                body=notification_data['body'],
            ),
            data=notification_data.get('data', {}),
            topic=topic,
        )
        
        response = messaging.send(message)
        logger.info(f'üì± FCM: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç–æ–ø–∏–∫ {topic}: {response}')
        return response
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫: {e}')
        return None


def _remove_invalid_tokens(response, tokens):
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ FCM —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        response: MulticastMessage response –æ—Ç Firebase
        tokens: —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    """
    try:
        invalid_tokens = []
        for idx, send_response in enumerate(response.responses):
            if not send_response.success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
                if send_response.exception:
                    error_code = getattr(send_response.exception, 'code', None)
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å
                    if error_code in ['invalid-registration-token', 'registration-token-not-registered']:
                        invalid_tokens.append(tokens[idx])
        
        if invalid_tokens:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            FCMToken.query.filter(FCMToken.token.in_(invalid_tokens)).delete(synchronize_session=False)
            db.session.commit()
            logger.info(f'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö FCM —Ç–æ–∫–µ–Ω–æ–≤: {len(invalid_tokens)}')
            
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}')
        db.session.rollback()

