"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

from firebase_admin import messaging
from firebase_config import is_firebase_available
from models import db, FCMToken, User
import logging

logger = logging.getLogger(__name__)


def send_container_notification(container_data, location_data, container_updated_at=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    –¢–û–õ–¨–ö–û –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å FCM —Ç–æ–∫–µ–Ω—ã)
    –ò –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–µ—Ä–Ω—É–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    –í–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    
    Args:
        container_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (id, number, status, fill_level)
        location_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∏ (id, name, company_id)
        container_updated_at: datetime –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    if not is_firebase_available():
        logger.debug('Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if container_data.get('status') != 'full':
        logger.debug(f'–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_data.get("id")} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ({container_data.get("status")}), FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è')
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_id = location_data['company_id']
        users = User.query.filter_by(parent_company_id=company_id).all()
        
        if not users:
            logger.debug(f'–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}')
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º FCM —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        fcm_tokens = []
        for user in users:
            for token_obj in user.fcm_tokens:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                if container_updated_at:
                    print(f'[FCM CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}')
                    print(f'            last_seen_at: {token_obj.last_seen_at}')
                    print(f'            updated_at: {container_updated_at}')
                    print(f'            –†–∞–∑–Ω–∏—Ü–∞: {(container_updated_at - token_obj.last_seen_at).total_seconds()} —Å–µ–∫')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if token_obj.last_seen_at < container_updated_at:
                        fcm_tokens.append(token_obj.token)
                        print(f'            ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
                        logger.info(f'üì± FCM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω —Å {token_obj.last_seen_at}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
                    else:
                        print(f'            ‚è≠Ô∏è –ü–†–û–ü–£–°–ö–ê–ï–ú (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω)')
                        logger.info(f'‚è≠Ô∏è FCM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤ {token_obj.last_seen_at}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
                else:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
                    fcm_tokens.append(token_obj.token)
                    print(f'[FCM CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} - –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º')
        
        if not fcm_tokens:
            logger.debug(f'–ù–µ—Ç FCM —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)')
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        status_text = {
            'full': '–∑–∞–ø–æ–ª–Ω–µ–Ω',
            'partial': '—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω',
            'empty': '–ø—É—Å—Ç–æ–π'
        }.get(container_data.get('status', 'unknown'), '–æ–±–Ω–æ–≤–ª–µ–Ω')
        
        title = '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ' + status_text + '!'
        body = f'{location_data["name"]}: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Ññ{container_data["number"]} {status_text}'
        
        # –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        message = messaging.MulticastMessage(
            notification=messaging.Notification(
                title=title,
                body=body,
            ),
            data={
                'location_id': str(location_data['id']),
                'location_name': location_data['name'],
                'container_id': str(container_data['id']),
                'container_number': str(container_data['number']),
                'status': container_data.get('status', 'unknown'),
                'fill_level': str(container_data.get('fill_level', 0)),
                'payload': 'container_updated',
            },
            tokens=fcm_tokens,
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        logger.info(f'üì± FCM: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(fcm_tokens)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
        logger.info(f'üì± FCM: –¢–æ–∫–µ–Ω—ã: {fcm_tokens[:2]}...')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ç–æ–∫–µ–Ω–∞
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        success_count = 0
        for token in fcm_tokens:
            try:
                single_message = messaging.Message(
                    notification=messaging.Notification(
                        title=title,
                        body=body,
                    ),
                    data={
                        'location_id': str(location_data['id']),
                        'location_name': location_data['name'],
                        'container_id': str(container_data['id']),
                        'container_number': str(container_data['number']),
                        'status': container_data.get('status', 'unknown'),
                        'fill_level': str(container_data.get('fill_level', 0)),
                        'payload': 'container_updated',
                    },
                    token=token,
                )
                response = messaging.send(single_message)
                logger.info(f'üì± FCM: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç–æ–∫–µ–Ω {token[:20]}...: {response}')
                success_count += 1
            except Exception as token_error:
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω {token[:20]}...: {token_error}')
        
        logger.info(f'üì± FCM: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {success_count}/{len(fcm_tokens)}')
        
        return success_count
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
        return 0


def send_location_notification(location_data, location_updated_at=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ
    –¢–û–õ–¨–ö–û –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    Args:
        location_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∏ (id, name, status, company_id)
        location_updated_at: datetime –∫–æ–≥–¥–∞ –ø–ª–æ—â–∞–¥–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    if not is_firebase_available():
        logger.debug('Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
    if location_data.get('status') != 'full':
        logger.debug(f'–ü–ª–æ—â–∞–¥–∫–∞ {location_data.get("id")} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ({location_data.get("status")}), FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è')
        return
    
    try:
        company_id = location_data['company_id']
        users = User.query.filter_by(parent_company_id=company_id).all()
        
        if not users:
            logger.debug(f'–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}')
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º FCM —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏
        # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –¥–µ-–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤)
        fcm_tokens_set = set()
        user_token_count = {}  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        for user in users:
            user_tokens_added = 0
            for token_obj in user.fcm_tokens:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏
                if location_updated_at:
                    print(f'[FCM LOCATION CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}')
                    print(f'                     –¢–æ–∫–µ–Ω: {token_obj.token[:20]}...')
                    print(f'                     last_seen_at: {token_obj.last_seen_at}')
                    print(f'                     updated_at: {location_updated_at}')
                    
                    if token_obj.last_seen_at and location_updated_at:
                        print(f'                     –†–∞–∑–Ω–∏—Ü–∞: {(location_updated_at - token_obj.last_seen_at).total_seconds()} —Å–µ–∫')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if token_obj.last_seen_at < location_updated_at:
                        if token_obj.token not in fcm_tokens_set:
                            fcm_tokens_set.add(token_obj.token)
                            user_tokens_added += 1
                            print(f'                     ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–æ—â–∞–¥–∫–µ')
                            logger.info(f'üì± FCM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–æ—â–∞–¥–∫–µ')
                        else:
                            print(f'                     ‚ö†Ô∏è –î–£–ë–õ–¨ –¢–û–ö–ï–ù–ê, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ')
                    else:
                        print(f'                     ‚è≠Ô∏è –ü–†–û–ü–£–°–ö–ê–ï–ú (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω)')
                        logger.info(f'‚è≠Ô∏è FCM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–æ—â–∞–¥–∫–µ')
                else:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
                    if token_obj.token not in fcm_tokens_set:
                        fcm_tokens_set.add(token_obj.token)
                        user_tokens_added += 1
                        print(f'[FCM LOCATION CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} - –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º')
                    else:
                        print(f'[FCM LOCATION CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} - –î–£–ë–õ–¨ –¢–û–ö–ï–ù–ê')
            
            if user_tokens_added > 0:
                user_token_count[user.email] = user_tokens_added
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        fcm_tokens = list(fcm_tokens_set)
        
        if user_token_count:
            print(f'[FCM DEDUP] –¢–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {user_token_count}')
            print(f'[FCM DEDUP] –ò–¢–û–ì–û —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(fcm_tokens)}')
        
        if not fcm_tokens:
            logger.debug(f'–ù–µ—Ç FCM —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏)')
            return
        
        status_text = '–∑–∞–ø–æ–ª–Ω–µ–Ω–∞'  # –í—Å–µ–≥–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Ç.–∫. –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—à–µ
        
        title = f'–ü–ª–æ—â–∞–¥–∫–∞ {status_text}!'
        body = f'{location_data["name"]}: –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–∫–µ–Ω—É
        import time
        fcm_call_id = f"LOCATION_{int(time.time() * 1000)}"  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        
        logger.info(f'üì± FCM LOCATION: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(fcm_tokens)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–æ—â–∞–¥–∫–µ...')
        print(f'[FCM LOCATION] CALL_ID: {fcm_call_id} - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(fcm_tokens)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏ {location_data["name"]}')
        print(f'[FCM LOCATION] CALL_ID: {fcm_call_id} - –¢–æ–∫–µ–Ω—ã: {[token[:20] + "..." for token in fcm_tokens[:3]]}')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–∫–µ–Ω–∞
        
        success_count = 0
        for i, token in enumerate(fcm_tokens):
            try:
                print(f'[FCM LOCATION] CALL_ID: {fcm_call_id} - –û—Ç–ø—Ä–∞–≤–∫–∞ {i+1}/{len(fcm_tokens)} –Ω–∞ —Ç–æ–∫–µ–Ω {token[:20]}...')
                single_message = messaging.Message(
                    notification=messaging.Notification(
                        title=title,
                        body=body,
                    ),
                    data={
                        'location_id': str(location_data['id']),
                        'location_name': location_data['name'],
                        'status': location_data.get('status', 'unknown'),
                        'payload': 'location_updated',
                    },
                    token=token,
                )
                response = messaging.send(single_message)
                logger.info(f'üì± FCM LOCATION: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç–æ–∫–µ–Ω {token[:20]}...: {response}')
                print(f'[FCM LOCATION] CALL_ID: {fcm_call_id} - ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response}')
                success_count += 1
            except Exception as token_error:
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω {token[:20]}...: {token_error}')
                print(f'[FCM LOCATION] CALL_ID: {fcm_call_id} - ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {i+1}: {token_error}')
        
        logger.info(f'üì± FCM LOCATION: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–æ—â–∞–¥–∫–µ: {success_count}/{len(fcm_tokens)}')
        print(f'[FCM LOCATION] CALL_ID: {fcm_call_id} - –ò–¢–û–ì–û: {success_count}/{len(fcm_tokens)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        
        return success_count
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—â–∞–¥–∫–µ: {e}')
        return 0


def send_to_company_topic(company_id, notification_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
    –í—Å–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–æ–ø–∏–∫, –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    Args:
        company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏
        notification_data: dict —Å title, body, –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ data
    """
    if not is_firebase_available():
        return
    
    try:
        topic = f'company_{company_id}'
        
        message = messaging.Message(
            notification=messaging.Notification(
                title=notification_data['title'],
                body=notification_data['body'],
            ),
            data=notification_data.get('data', {}),
            topic=topic,
        )
        
        response = messaging.send(message)
        logger.info(f'üì± FCM: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç–æ–ø–∏–∫ {topic}: {response}')
        return response
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫: {e}')
        return None


def _remove_invalid_tokens(response, tokens):
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ FCM —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        response: MulticastMessage response –æ—Ç Firebase
        tokens: —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    """
    try:
        invalid_tokens = []
        for idx, send_response in enumerate(response.responses):
            if not send_response.success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
                if send_response.exception:
                    error_code = getattr(send_response.exception, 'code', None)
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å
                    if error_code in ['invalid-registration-token', 'registration-token-not-registered']:
                        invalid_tokens.append(tokens[idx])
        
        if invalid_tokens:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            FCMToken.query.filter(FCMToken.token.in_(invalid_tokens)).delete(synchronize_session=False)
            db.session.commit()
            logger.info(f'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö FCM —Ç–æ–∫–µ–Ω–æ–≤: {len(invalid_tokens)}')
            
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}')
        db.session.rollback()

