"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞–º–∏
"""

from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from models import db, FCMToken, User
from datetime import datetime

bp = Blueprint('fcm', __name__, url_prefix='/api/fcm')


@bp.route('/token', methods=['POST'])
@jwt_required()
def save_fcm_token():
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Request body:
    {
        "token": "fcm_token_string",
        "device_info": "optional device info"
    }
    """
    try:
        user_id = get_jwt_identity()
        data = request.get_json()
        
        if not data or 'token' not in data:
            return jsonify({'error': 'FCM token required'}), 400
        
        token_string = data['token']
        device_info = data.get('device_info', request.headers.get('User-Agent', 'Unknown'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
        existing_token = FCMToken.query.filter_by(token=token_string).first()
        
        if existing_token:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ device_info
            existing_token.updated_at = datetime.utcnow()
            existing_token.device_info = device_info
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º
            if existing_token.user_id != user_id:
                existing_token.user_id = user_id
            print(f'‚úÖ FCM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            fcm_token = FCMToken(
                user_id=user_id,
                token=token_string,
                device_info=device_info
            )
            db.session.add(fcm_token)
            print(f'‚úÖ –ù–æ–≤—ã–π FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        
        db.session.commit()
        
        return jsonify({
            'message': 'FCM token saved successfully',
            'token_id': existing_token.id if existing_token else None
        }), 200
        
    except Exception as e:
        db.session.rollback()
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: {e}')
        return jsonify({'error': str(e)}), 500


@bp.route('/token', methods=['DELETE'])
@jwt_required()
def delete_fcm_token():
    """
    –£–¥–∞–ª–∏—Ç—å FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    
    Request body:
    {
        "token": "fcm_token_string"
    }
    """
    try:
        user_id = get_jwt_identity()
        data = request.get_json()
        
        if not data or 'token' not in data:
            return jsonify({'error': 'FCM token required'}), 400
        
        token_string = data['token']
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        fcm_token = FCMToken.query.filter_by(
            user_id=user_id,
            token=token_string
        ).first()
        
        if fcm_token:
            db.session.delete(fcm_token)
            db.session.commit()
            print(f'‚úÖ FCM —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
            return jsonify({'message': 'FCM token deleted successfully'}), 200
        else:
            return jsonify({'message': 'FCM token not found'}), 404
        
    except Exception as e:
        db.session.rollback()
        print(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: {e}')
        return jsonify({'error': str(e)}), 500


@bp.route('/tokens', methods=['GET'])
@jwt_required()
def get_user_tokens():
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ FCM —Ç–æ–∫–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        tokens = [token.to_dict() for token in user.fcm_tokens]
        
        return jsonify({
            'tokens': tokens,
            'count': len(tokens)
        }), 200
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–æ–≤: {e}')
        return jsonify({'error': str(e)}), 500


@bp.route('/heartbeat', methods=['POST'])
@jwt_required()
def update_last_seen():
    """
    –û–±–Ω–æ–≤–∏—Ç—å last_seen_at –¥–ª—è FCM —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ)
    
    Request body:
    {
        "token": "fcm_token_string"
    }
    """
    try:
        user_id = get_jwt_identity()
        data = request.get_json()
        
        if not data or 'token' not in data:
            return jsonify({'error': 'FCM token required'}), 400
        
        token_string = data['token']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_seen_at –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        fcm_token = FCMToken.query.filter_by(
            user_id=user_id,
            token=token_string
        ).first()
        
        if fcm_token:
            fcm_token.last_seen_at = datetime.utcnow()
            db.session.commit()
            print(f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω last_seen_at –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
            return jsonify({
                'message': 'Last seen updated successfully',
                'last_seen_at': fcm_token.last_seen_at.isoformat()
            }), 200
        else:
            return jsonify({'message': 'FCM token not found'}), 404
        
    except Exception as e:
        db.session.rollback()
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_seen_at: {e}')
        return jsonify({'error': str(e)}), 500

