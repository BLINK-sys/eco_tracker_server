#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–∞—Ç—á–∏–∫–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
"""
import time
import random
import threading
from datetime import datetime
from models import db, Container, Location
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections = 0
_socketio = None

def set_socketio(socketio_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ SocketIO"""
    global _socketio
    _socketio = socketio_instance

def increment_connections():
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global active_connections
    active_connections += 1
    print(f"üì° Active connections: {active_connections}")

def decrement_connections():
    """–£–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global active_connections
    active_connections = max(0, active_connections - 1)
    print(f"üì° Active connections: {active_connections}")

def has_active_connections():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    return active_connections > 0

def simulate_smart_sensor_data(app):
    """–£–º–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö"""
    global _socketio
    
    if not _socketio:
        print("‚ùå SocketIO not initialized")
        return
    
    print("üß† Starting SMART sensor simulator...")
    print("   - Works only when clients are connected")
    print("   - Pauses when no active connections")
    
    # –≠—Ç–∞–ø—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    stages = [
        (1, 1, 1),  # 1 full, 1 partial, 1 empty
        (1, 2, 0),  # 1 full, 2 partial, 0 empty
        (2, 1, 0),  # 2 full, 1 partial, 0 empty
        (3, 0, 0),  # 3 full, 0 partial, 0 empty
        (0, 0, 3),  # 0 full, 0 partial, 3 empty
        (0, 1, 2),  # 0 full, 1 partial, 2 empty
    ]
    
    current_stage = 0
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if not has_active_connections():
                print("üò¥ No active connections - simulator sleeping...")
                time.sleep(30)  # –°–ø–∏–º 30 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                continue
            
            print(f"\nüé¨ SIMULATOR ACTIVE - {active_connections} connections")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏
            with app.app_context():
                locations = Location.query.all()
                
            if not locations:
                print("‚ùå No locations found")
                time.sleep(60)
                continue
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é
            full_count, partial_count, empty_count = stages[current_stage]
            current_stage = (current_stage + 1) % len(stages)
            
            print(f"\n============================================================")
            print(f"STAGE: {full_count} full, {partial_count} partial, {empty_count} empty")
            print(f"============================================================")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
            for i, location in enumerate(locations):
                with app.app_context():
                    containers = Container.query.filter_by(location_id=location.id).all()
                
                if not containers:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
                if i < full_count:
                    fill_level = 100
                    status = "FULL"
                elif i < full_count + partial_count:
                    fill_level = 60
                    status = "PARTIAL"
                else:
                    fill_level = 0
                    status = "EMPTY"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –ª–æ–∫–∞—Ü–∏–∏
                for container in containers:
                    with app.app_context():
                        container.fill_level = fill_level
                        container.updated_at = datetime.utcnow()
                        db.session.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
                    if _socketio:
                        update_data = {
                            'container_id': container.id,
                            'location_id': container.location_id,
                            'fill_level': fill_level,
                            'status': status,
                            'updated_at': container.updated_at.isoformat()
                        }
                        
                        room_name = f'company_{location.company_id}'
                        print(f"[BROADCAST] Sending 'container_updated' to room: {room_name}")
                        print(f"            Container: {container.id}, fill_level: {fill_level}%")
                        
                        _socketio.emit('container_updated', update_data, room=room_name)
                
                print(f"  Location: {location.name} -> {status}")
                print(f"       Updated {len(containers)} containers to {fill_level}%")
            
            print(f"[OK] Stage complete - Updated containers")
            print(f"Next: Stage {current_stage + 1}/6")
            
            # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
            if has_active_connections():
                print("‚è∞ Waiting 2 minutes before next stage...")
                time.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
            else:
                print("üò¥ No connections - sleeping...")
                time.sleep(30)
                
        except Exception as e:
            logger.error(f'Error in smart simulator: {str(e)}')
            print(f"[ERROR] Smart simulator error: {str(e)}")
            time.sleep(60)

def start_smart_simulator(app):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–º–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–∞—Ç—á–∏–∫–æ–≤"""
    print("\n>>> Starting SMART sensor simulator...")
    simulator_thread = threading.Thread(target=simulate_smart_sensor_data, args=(app,), daemon=True)
    simulator_thread.start()
    logger.info('Smart sensor simulator thread started')
    print("[OK] Smart sensor simulator thread started\n")
